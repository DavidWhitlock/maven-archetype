
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;
import java.util.jar.*;
import org.codehaus.plexus.util.*;

void fail( String message )
{
    throw new Exception(message);
}

void assertTrue( String message, boolean test )
{
    if ( !test )
    {
        fail( message );
    }
}

void assertNotNull( String message, Object o )
{
    if ( o == null )
    {
        fail( message );
    }
}

void assertJarFileContainsEntryWithNonZeroSize( JarFile jar, String jarEntryName )
{
    entry = jar.getJarEntry( jarEntryName );
    assertNotNull( "Could not find jar file entry named " + jarEntryName , entry );
    assertTrue( "Jar file entry with zero or negative size: " + jarEntryName, entry.getSize() > 0 );
}

void assertJarFileContainsEntryWithZeroSize( JarFile jar, String jarEntryName )
{
    entry = jar.getJarEntry( jarEntryName );
    assertNotNull( "Could not find jar file entry named " + jarEntryName , entry );
    assertTrue( "Jar file entry with non-zero size: " + jarEntryName, entry.getSize() == 0 );
}

target = new File( basedir, "target" );
jarFile = new File( target, "archetype-jar-manifest-1.0-SNAPSHOT.jar" );

assertTrue( "jar file " + jarFile + " does not exist", jarFile.exists() );

jar = new JarFile( jarFile );

assertJarFileContainsEntryWithNonZeroSize( jar, "archetype-resources/pom.xml" );
assertJarFileContainsEntryWithNonZeroSize( jar, "archetype-resources/src/main/java/App.java" );
assertJarFileContainsEntryWithZeroSize( jar, "archetype-resources/src/main/resources/__artifactId__-empty-directory/" );
assertJarFileContainsEntryWithNonZeroSize( jar, "archetype-resources/src/main/resources/__packageInPathFormat__/__package__.properties" );
assertJarFileContainsEntryWithZeroSize( jar, "archetype-resources/src/main/resources/empty-directory/" );
assertJarFileContainsEntryWithNonZeroSize( jar, "archetype-resources/src/main/resources/test-__artifactId__.properties" );
assertJarFileContainsEntryWithNonZeroSize( jar, "archetype-resources/src/site/apt/__artifactId__.apt" );
assertJarFileContainsEntryWithNonZeroSize( jar, "META-INF/maven/archetype-metadata.xml" );